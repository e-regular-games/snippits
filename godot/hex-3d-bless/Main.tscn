[gd_scene load_steps=11 format=2]

[ext_resource path="res://meshes/tile-grass-lib.meshlib" type="MeshLibrary" id=1]
[ext_resource path="res://BlessEffect.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "tile002"
surfaces/0 = {
"aabb": AABB( -11.5789, -4.65661e-10, -13.4737, 23.1578, 20, 26.9474 ),
"array_data": PoolByteArray( 0, 0, 48, 65, 0, 0, 160, 65, 205, 204, 204, 192, 193, 0, 109, 0, 147, 0, 193, 129, 86, 53, 0, 0, 238, 255, 223, 179, 246, 255, 255, 175, 205, 204, 76, 193, 193, 0, 109, 0, 147, 0, 193, 129, 255, 55, 0, 60, 0, 0, 48, 65, 246, 255, 255, 175, 205, 204, 204, 192, 193, 0, 109, 0, 147, 0, 193, 129, 86, 53, 255, 59, 238, 255, 223, 179, 0, 0, 160, 65, 205, 204, 76, 193, 63, 0, 109, 0, 147, 0, 63, 129, 255, 55, 0, 0, 0, 0, 48, 193, 246, 255, 255, 175, 205, 204, 204, 192, 63, 0, 109, 0, 147, 0, 63, 129, 84, 57, 0, 60, 238, 255, 223, 179, 246, 255, 255, 175, 205, 204, 76, 193, 63, 0, 109, 0, 147, 0, 63, 129, 255, 55, 0, 60, 238, 255, 223, 179, 0, 0, 160, 65, 205, 204, 76, 65, 193, 0, 147, 0, 109, 0, 193, 129, 0, 0, 0, 0, 0, 0, 48, 65, 246, 255, 255, 175, 205, 204, 204, 64, 193, 0, 147, 0, 109, 0, 193, 129, 82, 49, 0, 60, 238, 255, 223, 179, 246, 255, 255, 175, 205, 204, 76, 65, 193, 0, 147, 0, 109, 0, 193, 129, 0, 0, 0, 60, 0, 0, 48, 193, 0, 0, 160, 65, 205, 204, 204, 64, 63, 0, 147, 0, 109, 0, 63, 129, 171, 58, 0, 0, 238, 255, 223, 179, 246, 255, 255, 175, 205, 204, 76, 65, 63, 0, 147, 0, 109, 0, 63, 129, 255, 59, 0, 60, 0, 0, 48, 193, 246, 255, 255, 175, 205, 204, 204, 64, 63, 0, 147, 0, 109, 0, 63, 129, 171, 58, 0, 60, 0, 0, 48, 65, 0, 0, 160, 65, 205, 204, 204, 64, 129, 0, 0, 0, 0, 0, 129, 129, 82, 49, 0, 0, 0, 0, 48, 65, 246, 255, 255, 175, 205, 204, 204, 192, 129, 0, 0, 0, 0, 0, 129, 129, 86, 53, 255, 59, 0, 0, 48, 65, 246, 255, 255, 175, 205, 204, 204, 64, 129, 0, 0, 0, 0, 0, 129, 129, 82, 49, 0, 60, 0, 0, 48, 193, 0, 0, 160, 65, 205, 204, 204, 192, 127, 0, 0, 0, 0, 0, 127, 129, 84, 57, 0, 0, 0, 0, 48, 193, 246, 255, 255, 175, 205, 204, 204, 64, 127, 0, 0, 0, 0, 0, 127, 129, 171, 58, 0, 60, 0, 0, 48, 193, 246, 255, 255, 175, 205, 204, 204, 192, 127, 0, 0, 0, 0, 0, 127, 129, 84, 57, 0, 60, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 193, 63, 0, 147, 0, 147, 0, 193, 127, 255, 55, 0, 60, 45, 67, 57, 65, 0, 0, 160, 65, 49, 148, 215, 192, 63, 0, 147, 0, 147, 0, 193, 127, 86, 53, 0, 0, 45, 67, 57, 65, 246, 255, 255, 175, 49, 148, 215, 192, 63, 0, 147, 0, 147, 0, 193, 127, 86, 53, 255, 59, 45, 67, 57, 193, 246, 255, 255, 175, 49, 148, 215, 192, 193, 0, 147, 0, 147, 0, 63, 127, 84, 57, 0, 60, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 193, 193, 0, 147, 0, 147, 0, 63, 127, 255, 55, 0, 0, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 193, 193, 0, 147, 0, 147, 0, 63, 127, 255, 55, 0, 60, 45, 67, 57, 65, 246, 255, 255, 175, 49, 148, 215, 64, 63, 0, 109, 0, 109, 0, 193, 127, 82, 49, 0, 60, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 65, 63, 0, 109, 0, 109, 0, 193, 127, 0, 0, 0, 0, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 65, 63, 0, 109, 0, 109, 0, 193, 127, 0, 0, 0, 60, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 65, 193, 0, 109, 0, 109, 0, 63, 127, 255, 59, 0, 60, 45, 67, 57, 193, 0, 0, 160, 65, 49, 148, 215, 64, 193, 0, 109, 0, 109, 0, 63, 127, 171, 58, 0, 0, 45, 67, 57, 193, 246, 255, 255, 175, 49, 148, 215, 64, 193, 0, 109, 0, 109, 0, 63, 127, 171, 58, 0, 60, 45, 67, 57, 65, 246, 255, 255, 175, 49, 148, 215, 192, 127, 0, 0, 0, 0, 0, 129, 127, 86, 53, 255, 59, 45, 67, 57, 65, 0, 0, 160, 65, 49, 148, 215, 64, 127, 0, 0, 0, 0, 0, 129, 127, 82, 49, 0, 0, 45, 67, 57, 65, 246, 255, 255, 175, 49, 148, 215, 64, 127, 0, 0, 0, 0, 0, 129, 127, 82, 49, 0, 60, 45, 67, 57, 193, 246, 255, 255, 175, 49, 148, 215, 64, 129, 0, 0, 0, 0, 0, 127, 127, 171, 58, 0, 60, 45, 67, 57, 193, 0, 0, 160, 65, 49, 148, 215, 192, 129, 0, 0, 0, 0, 0, 127, 127, 84, 57, 0, 0, 45, 67, 57, 193, 246, 255, 255, 175, 49, 148, 215, 192, 129, 0, 0, 0, 0, 0, 127, 127, 84, 57, 0, 60, 238, 255, 223, 179, 0, 0, 160, 65, 205, 204, 76, 193, 193, 0, 109, 0, 147, 0, 193, 129, 255, 55, 0, 0, 0, 0, 48, 193, 0, 0, 160, 65, 205, 204, 204, 192, 63, 0, 109, 0, 147, 0, 63, 129, 84, 57, 0, 0, 0, 0, 48, 65, 0, 0, 160, 65, 205, 204, 204, 64, 193, 0, 147, 0, 109, 0, 193, 129, 82, 49, 0, 0, 238, 255, 223, 179, 0, 0, 160, 65, 205, 204, 76, 65, 63, 0, 147, 0, 109, 0, 63, 129, 255, 59, 0, 0, 0, 0, 48, 65, 0, 0, 160, 65, 205, 204, 204, 192, 129, 0, 0, 0, 0, 0, 129, 129, 86, 53, 0, 0, 0, 0, 48, 193, 0, 0, 160, 65, 205, 204, 204, 64, 127, 0, 0, 0, 0, 0, 127, 129, 171, 58, 0, 0, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 193, 63, 0, 147, 0, 147, 0, 193, 127, 255, 55, 0, 60, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 193, 63, 0, 147, 0, 147, 0, 193, 127, 255, 55, 0, 0, 45, 67, 57, 65, 0, 0, 160, 65, 49, 148, 215, 192, 63, 0, 147, 0, 147, 0, 193, 127, 86, 53, 0, 0, 45, 67, 57, 193, 246, 255, 255, 175, 49, 148, 215, 192, 193, 0, 147, 0, 147, 0, 63, 127, 84, 57, 0, 60, 45, 67, 57, 193, 0, 0, 160, 65, 49, 148, 215, 192, 193, 0, 147, 0, 147, 0, 63, 127, 84, 57, 0, 0, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 193, 193, 0, 147, 0, 147, 0, 63, 127, 255, 55, 0, 0, 45, 67, 57, 65, 246, 255, 255, 175, 49, 148, 215, 64, 63, 0, 109, 0, 109, 0, 193, 127, 82, 49, 0, 60, 45, 67, 57, 65, 0, 0, 160, 65, 49, 148, 215, 64, 63, 0, 109, 0, 109, 0, 193, 127, 82, 49, 0, 0, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 65, 63, 0, 109, 0, 109, 0, 193, 127, 0, 0, 0, 0, 96, 94, 7, 182, 246, 255, 255, 175, 70, 148, 87, 65, 193, 0, 109, 0, 109, 0, 63, 127, 255, 59, 0, 60, 96, 94, 7, 182, 0, 0, 160, 65, 70, 148, 87, 65, 193, 0, 109, 0, 109, 0, 63, 127, 255, 59, 0, 0, 45, 67, 57, 193, 0, 0, 160, 65, 49, 148, 215, 64, 193, 0, 109, 0, 109, 0, 63, 127, 171, 58, 0, 0, 45, 67, 57, 65, 0, 0, 160, 65, 49, 148, 215, 192, 127, 0, 0, 0, 0, 0, 129, 127, 86, 53, 0, 0, 45, 67, 57, 193, 0, 0, 160, 65, 49, 148, 215, 64, 129, 0, 0, 0, 0, 0, 127, 127, 171, 58, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 0, 0, 1, 0, 36, 0, 3, 0, 4, 0, 37, 0, 6, 0, 7, 0, 38, 0, 9, 0, 10, 0, 39, 0, 12, 0, 13, 0, 40, 0, 15, 0, 16, 0, 41, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 51, 0, 53, 0, 52, 0, 30, 0, 31, 0, 54, 0, 33, 0, 34, 0, 55, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 72,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 56
}

[sub_resource type="Shader" id=4]
code = "shader_type spatial;

uniform float rings = 3;
uniform float alpha = 0.5;
uniform float fade_start = 0.3;
uniform float time_scale = 0.5;
uniform vec4 color: hint_color;
const float PI = 3.1459;

void fragment() {
	ALBEDO = color.rgb;
	if (UV.y > fade_start) {
		ALPHA = alpha * (sin(rings * (UV.y + TIME  * time_scale) * (2.0 * PI)) + 1.0) / 2.0;
	} else {
		ALPHA = alpha * (UV.y / fade_start) * (sin(rings * (UV.y + TIME  * time_scale) * (2.0 * PI)) + 1.0) / 2.0;
	}
	EMISSION = color.rgb;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/rings = 3.0
shader_param/alpha = 0.5
shader_param/fade_start = 0.3
shader_param/time_scale = 1.0
shader_param/color = Color( 0.788235, 0.972549, 0.929412, 1 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 4 )
shader_param/rings = 3.0
shader_param/alpha = 0.5
shader_param/fade_start = 0.3
shader_param/time_scale = 1.0
shader_param/color = Color( 0.788235, 0.972549, 0.929412, 1 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 4 )
shader_param/rings = 3.0
shader_param/alpha = 0.5
shader_param/fade_start = 0.3
shader_param/time_scale = 1.0
shader_param/color = Color( 0.788235, 0.972549, 0.929412, 1 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 4 )
shader_param/rings = 3.0
shader_param/alpha = 0.5
shader_param/fade_start = 0.3
shader_param/time_scale = 1.0
shader_param/color = Color( 0.788235, 0.972549, 0.929412, 1 )

[node name="Spatial" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.979392, 0.0841967, -0.18358, 0, 0.90896, 0.416884, 0.201967, 0.408293, -0.890228, -5.87716, 20.9815, -46.0782 )

[node name="GridMap" type="GridMap" parent="."]
mesh_library = ExtResource( 1 )
cell_size = Vector3( 11, 2, 19.2 )
data = {
"cells": PoolIntArray( 1, 0, 1, 65535, 0, 1, 1, 65534, 2, 65535, 65534, 1, 0, 65535, -2147483648, 2, 65535, 1, 65534, 65535, 1 )
}
__meta__ = {
"_editor_clip_": 0
}

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.476223, 0.879324, 0, -0.879324, 0.476223, -20.0854, 18.1844, 0 )
light_energy = 0.8
shadow_enabled = true

[node name="BlessEffect" type="Spatial" parent="."]
script = ExtResource( 2 )
m_period = 2.5
m_color = Color( 0.666667, 0.796078, 0.960784, 1 )

[node name="tile-blessing0" type="MeshInstance" parent="BlessEffect"]
transform = Transform( 0.95, 0, 0, 0, 1, 0, 0, 0, 0.95, 5.5, 0, -9.6 )
mesh = SubResource( 3 )
material/0 = SubResource( 5 )

[node name="tile-blessing1" type="MeshInstance" parent="BlessEffect"]
transform = Transform( 0.95, 0, 0, 0, 1, 0, 0, 0, 0.95, 5.5, 0, -9.6 )
mesh = SubResource( 3 )
material/0 = SubResource( 6 )

[node name="tile-blessing2" type="MeshInstance" parent="BlessEffect"]
transform = Transform( 0.95, 0, 0, 0, 1, 0, 0, 0, 0.95, 5.5, 0, -9.6 )
mesh = SubResource( 3 )
material/0 = SubResource( 7 )

[node name="tile-blessing3" type="MeshInstance" parent="BlessEffect"]
transform = Transform( 0.95, 0, 0, 0, 1, 0, 0, 0, 0.95, 5.5, 0, -9.6 )
mesh = SubResource( 3 )
material/0 = SubResource( 8 )

[node name="SpotLight" type="SpotLight" parent="BlessEffect"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, 1, 0, -1, -1.62921e-07, 5.77133, 18.1205, -8.46687 )
light_color = Color( 1, 1, 0.992157, 1 )
light_energy = 8.45
spot_range = 20.9
spot_angle = 37.3
